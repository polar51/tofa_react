{"version":3,"file":"static/js/983.c46b5280.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/query-core/src/infiniteQueryObserver.ts","../node_modules/@tanstack/react-query/src/useInfiniteQuery.ts","../node_modules/@tanstack/virtual-core/src/utils.ts","../node_modules/@tanstack/virtual-core/src/index.ts","../node_modules/@tanstack/react-virtual/src/index.tsx"],"sourcesContent":["import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type {\n  DefaultError,\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverBaseResult,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  TData,\n  InfiniteData<TQueryData, TPageParam>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward' },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward' },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<\n      TQueryFnData,\n      TError,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const parentResult = super.createResult(query, options)\n\n    const { isFetching, isRefetching, isError, isRefetchError } = parentResult\n    const fetchDirection = state.fetchMeta?.fetchMore?.direction\n\n    const isFetchNextPageError = isError && fetchDirection === 'forward'\n    const isFetchingNextPage = isFetching && fetchDirection === 'forward'\n\n    const isFetchPreviousPageError = isError && fetchDirection === 'backward'\n    const isFetchingPreviousPage = isFetching && fetchDirection === 'backward'\n\n    const result: InfiniteQueryObserverBaseResult<TData, TError> = {\n      ...parentResult,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchNextPageError,\n      isFetchingNextPage,\n      isFetchPreviousPageError,\n      isFetchingPreviousPage,\n      isRefetchError:\n        isRefetchError && !isFetchNextPageError && !isFetchPreviousPageError,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n\n    return result as InfiniteQueryObserverResult<TData, TError>\n  }\n}\n","'use client'\nimport { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport type {\n  DefaultError,\n  InfiniteData,\n  QueryClient,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  DefinedUseInfiniteQueryResult,\n  UseInfiniteQueryOptions,\n  UseInfiniteQueryResult,\n} from './types'\nimport type {\n  DefinedInitialDataInfiniteOptions,\n  UndefinedInitialDataInfiniteOptions,\n} from './infiniteQueryOptions'\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: DefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): DefinedUseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UndefinedInitialDataInfiniteOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseInfiniteQueryResult<TData, TError>\n\nexport function useInfiniteQuery(\n  options: UseInfiniteQueryOptions,\n  queryClient?: QueryClient,\n) {\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  )\n}\n","export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: false | string\n    debug?: () => any\n    onChange?: (result: TResult) => void\n    initialDeps?: TDeps\n  },\n) {\n  let deps = opts.initialDeps ?? []\n  let result: TResult | undefined\n\n  return (): TResult => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    opts?.onChange?.(result)\n\n    return result!\n  }\n}\n\nexport function notUndefined<T>(value: T | undefined, msg?: string): T {\n  if (value === undefined) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : ''}`)\n  } else {\n    return value\n  }\n}\n\nexport const approxEqual = (a: number, b: number) => Math.abs(a - b) < 1\n\nexport const debounce = (\n  targetWindow: Window & typeof globalThis,\n  fn: Function,\n  ms: number,\n) => {\n  let timeoutId: number\n  return function (this: any, ...args: any[]) {\n    targetWindow.clearTimeout(timeoutId)\n    timeoutId = targetWindow.setTimeout(() => fn.apply(this, args), ms)\n  }\n}\n","import { approxEqual, memo, notUndefined, debounce } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\nexport interface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  if (!targetWindow.ResizeObserver) {\n    return () => {}\n  }\n\n  const observer = new targetWindow.ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nconst addEventListenerOptions = {\n  passive: true,\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nconst supportsScrollend =\n  typeof window == 'undefined' ? true : 'onscrollend' in window\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number, isScrolling: boolean) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback = supportsScrollend\n    ? () => undefined\n    : debounce(\n        targetWindow,\n        () => {\n          cb(offset, false)\n        },\n        instance.options.isScrollingResetDelay,\n      )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number, isScrolling: boolean) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback = supportsScrollend\n    ? () => undefined\n    : debounce(\n        targetWindow,\n        () => {\n          cb(offset, false)\n        },\n        instance.options.isScrollingResetDelay,\n      )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollX' : 'scrollY']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number, isScrolling: boolean) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    sync: boolean,\n  ) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number | (() => number)\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  gap?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: VirtualItem[]\n  lanes?: number\n  isScrollingResetDelay?: number\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  targetWindow: (Window & typeof globalThis) | null = null\n  isScrolling: boolean = false\n  private scrollToIndexTimeoutId: number | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: number[] = []\n  scrollRect: Rect\n  scrollOffset: number\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments: number = 0\n  shouldAdjustScrollPositionOnItemSizeChange:\n    | undefined\n    | ((\n        item: VirtualItem,\n        delta: number,\n        instance: Virtualizer<TScrollElement, TItemElement>,\n      ) => boolean)\n  measureElementCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      }\n\n      if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n        return null\n      }\n\n      return (_ro = new this.targetWindow.ResizeObserver((entries) => {\n        entries.forEach((entry) => {\n          this._measureElement(entry.target as TItemElement, entry)\n        })\n      }))\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } | null = null\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset =\n      typeof this.options.initialOffset === 'function'\n        ? this.options.initialOffset()\n        : this.options.initialOffset\n    this.measurementsCache = this.options.initialMeasurementsCache\n    this.measurementsCache.forEach((item) => {\n      this.itemSizeCache.set(item.key, item.size)\n    })\n\n    this.notify(false, false)\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      gap: 0,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      isScrollingResetDelay: 150,\n      ...opts,\n    }\n  }\n\n  private notify = (force: boolean, sync: boolean) => {\n    const { startIndex, endIndex } = this.range ?? {\n      startIndex: undefined,\n      endIndex: undefined,\n    }\n    const range = this.calculateRange()\n\n    if (\n      force ||\n      startIndex !== range?.startIndex ||\n      endIndex !== range?.endIndex\n    ) {\n      this.options.onChange?.(this, sync)\n    }\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    this.measureElementCache.forEach(this.observer.observe)\n    return () => {\n      this.observer.disconnect()\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      if (this.scrollElement && 'ownerDocument' in this.scrollElement) {\n        this.targetWindow = this.scrollElement.ownerDocument.defaultView\n      } else {\n        this.targetWindow = this.scrollElement?.window ?? null\n      }\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.notify(false, false)\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0\n          this.scrollDirection = isScrolling\n            ? this.scrollOffset < offset\n              ? 'forward'\n              : 'backward'\n            : null\n          this.scrollOffset = offset\n\n          const prevIsScrolling = this.isScrolling\n          this.isScrolling = isScrolling\n\n          this.notify(prevIsScrolling !== isScrolling, isScrolling)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getMeasurementOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getFurthestMeasurement = (\n    measurements: VirtualItem[],\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n          if (a.end === b.end) {\n            return a.index - b.index\n          }\n\n          return a.end - b.end\n        })[0]\n      : undefined\n  }\n\n  private getMeasurements = memo(\n    () => [this.getMeasurementOptions(), this.itemSizeCache],\n    ({ count, paddingStart, scrollMargin, getItemKey }, itemSizeCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end + this.options.gap\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range =\n        measurements.length > 0 && outerSize > 0\n          ? calculateRange({\n              measurements,\n              outerSize,\n              scrollOffset,\n            })\n          : null)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return range === null\n        ? []\n        : rangeExtractor({\n            startIndex: range.startIndex,\n            endIndex: range.endIndex,\n            overscan,\n            count,\n          })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const item = this.measurementsCache[this.indexFromElement(node)]\n\n    if (!item || !node.isConnected) {\n      this.measureElementCache.forEach((cached, key) => {\n        if (cached === node) {\n          this.observer.unobserve(node)\n          this.measureElementCache.delete(key)\n        }\n      })\n      return\n    }\n\n    const prevNode = this.measureElementCache.get(item.key)\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.measureElementCache.set(item.key, node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, entry, this)\n\n    this.resizeItem(item, measuredItemSize)\n  }\n\n  resizeItem = (item: VirtualItem, size: number) => {\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n    const delta = size - itemSize\n\n    if (delta !== 0) {\n      if (\n        this.shouldAdjustScrollPositionOnItemSizeChange !== undefined\n          ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this)\n          : item.start < this.scrollOffset + this.scrollAdjustments\n      ) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(item.index)\n      this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size))\n\n      this.notify(true, false)\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= this.scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= this.scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - this.getSize()\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const measurement = notUndefined(this.getMeasurements()[index])\n\n    if (align === 'auto') {\n      if (\n        measurement.end >=\n        this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd\n      ) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        this.scrollOffset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return [this.scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.measureElementCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null && this.targetWindow) {\n      this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const [toOffset, align] = this.getOffsetForIndex(index, initialAlign)\n\n    this._scrollToOffset(toOffset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode() && this.targetWindow) {\n      this.scrollToIndexTimeoutId = this.targetWindow.setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.measureElementCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [toOffset] = this.getOffsetForIndex(index, align)\n\n          if (!approxEqual(toOffset, this.scrollOffset)) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.scrollOffset + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () => {\n    const measurements = this.getMeasurements()\n\n    let end: number\n    // If there are no measurements, set the end to paddingStart\n    if (measurements.length === 0) {\n      end = this.options.paddingStart\n    } else {\n      // If lanes is 1, use the last measurement's end, otherwise find the maximum end value among all measurements\n      end =\n        this.options.lanes === 1\n          ? measurements[measurements.length - 1]?.end ?? 0\n          : Math.max(\n              ...measurements.slice(-this.options.lanes).map((m) => m.end),\n            )\n    }\n\n    return end - this.options.scrollMargin + this.options.paddingEnd\n  }\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.options.onChange?.(this, false)\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n","import * as React from 'react'\nimport { flushSync } from 'react-dom'\nimport {\n  elementScroll,\n  observeElementOffset,\n  observeElementRect,\n  observeWindowOffset,\n  observeWindowRect,\n  PartialKeys,\n  Virtualizer,\n  VirtualizerOptions,\n  windowScroll,\n} from '@tanstack/virtual-core'\nexport * from '@tanstack/virtual-core'\n\n//\n\nconst useIsomorphicLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction useVirtualizerBase<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n>(\n  options: VirtualizerOptions<TScrollElement, TItemElement>,\n): Virtualizer<TScrollElement, TItemElement> {\n  const rerender = React.useReducer(() => ({}), {})[1]\n\n  const resolvedOptions: VirtualizerOptions<TScrollElement, TItemElement> = {\n    ...options,\n    onChange: (instance, sync) => {\n      if (sync) {\n        flushSync(rerender)\n      } else {\n        rerender()\n      }\n      options.onChange?.(instance, sync)\n    },\n  }\n\n  const [instance] = React.useState(\n    () => new Virtualizer<TScrollElement, TItemElement>(resolvedOptions),\n  )\n\n  instance.setOptions(resolvedOptions)\n\n  React.useEffect(() => {\n    return instance._didMount()\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate()\n  })\n\n  return instance\n}\n\nexport function useVirtualizer<\n  TScrollElement extends Element,\n  TItemElement extends Element,\n>(\n  options: PartialKeys<\n    VirtualizerOptions<TScrollElement, TItemElement>,\n    'observeElementRect' | 'observeElementOffset' | 'scrollToFn'\n  >,\n): Virtualizer<TScrollElement, TItemElement> {\n  return useVirtualizerBase<TScrollElement, TItemElement>({\n    observeElementRect: observeElementRect,\n    observeElementOffset: observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options,\n  })\n}\n\nexport function useWindowVirtualizer<TItemElement extends Element>(\n  options: PartialKeys<\n    VirtualizerOptions<Window, TItemElement>,\n    | 'getScrollElement'\n    | 'observeElementRect'\n    | 'observeElementOffset'\n    | 'scrollToFn'\n  >,\n): Virtualizer<Window, TItemElement> {\n  return useVirtualizerBase<Window, TItemElement>({\n    getScrollElement: () => (typeof document !== 'undefined' ? window : null),\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    initialOffset: () => (typeof document !== 'undefined' ? window.scrollY : 0),\n    ...options,\n  })\n}\n"],"names":["InfiniteQueryObserver","QueryObserver","constructor","client","options","super","bindMethods","this","fetchNextPage","bind","fetchPreviousPage","setOptions","notifyOptions","behavior","infiniteQueryBehavior","getOptimisticResult","fetch","meta","fetchMore","direction","createResult","query","_state$fetchMeta","state","parentResult","isFetching","isRefetching","isError","isRefetchError","fetchDirection","fetchMeta","isFetchNextPageError","isFetchingNextPage","isFetchPreviousPageError","isFetchingPreviousPage","hasNextPage","data","hasPreviousPage","useInfiniteQuery","queryClient","useBaseQuery","memo","getDeps","fn","opts","_opts$initialDeps","result","deps","initialDeps","_a","_b","_c","_d","depTime","key","debug","call","Date","now","newDeps","length","some","dep","index","resultTime","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","concat","max","min","onChange","notUndefined","value","msg","Error","debounce","targetWindow","ms","timeoutId","_len","arguments","args","Array","_key","clearTimeout","setTimeout","apply","defaultKeyExtractor","defaultRangeExtractor","range","start","startIndex","overscan","end","endIndex","count","arr","i","push","observeElementRect","instance","cb","element","scrollElement","handler","rect","width","height","getBoundingClientRect","ResizeObserver","observer","entries","entry","borderBoxSize","box","inlineSize","blockSize","observe","unobserve","addEventListenerOptions","passive","supportsScrollend","window","observeElementOffset","offset","fallback","isScrollingResetDelay","createHandler","isScrolling","horizontal","endHandler","addEventListener","removeEventListener","measureElement","elementScroll","_ref2","adjustments","toOffset","scrollTo","Virtualizer","_this","unsubs","scrollToIndexTimeoutId","measurementsCache","itemSizeCache","Map","pendingMeasuredCacheIndexes","scrollDirection","scrollAdjustments","measureElementCache","_ro","get","forEach","_measureElement","target","disconnect","opts2","Object","_ref3","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","rangeExtractor","initialRect","scrollMargin","gap","indexAttribute","initialMeasurementsCache","lanes","notify","force","sync","_this$range","calculateRange","cleanup","filter","Boolean","d","_didMount","_willUpdate","getScrollElement","_ref4","ownerDocument","defaultView","_scrollToOffset","scrollOffset","scrollRect","prevIsScrolling","getSize","getMeasurementOptions","getFurthestMeasurement","measurements","furthestMeasurementsFound","furthestMeasurements","m","measurement","has","lane","previousFurthestMeasurement","set","size","from","values","sort","a","b","getMeasurements","_ref5","slice","furthestMeasurement","measuredSize","estimateSize","process","outerSize","_ref8","getOffset","findNearestBinarySearch","getIndexes","indexFromElement","node","attributeName","indexStr","getAttribute","parseInt","warn","item","isConnected","cached","delete","prevNode","measuredItemSize","resizeItem","_this$itemSizeCache$g","delta","shouldAdjustScrollPositionOnItemSizeChange","getVirtualItems","indexes","virtualItems","k","len","getVirtualItemForOffset","getOffsetForAlignment","align","scrollSizeProp","maxOffset","document","documentElement","getOffsetForIndex","undefined","isDynamicMode","cancelScrollToIndex","scrollToOffset","scrollToIndex","initialAlign","toOffset2","abs","approxEqual","scrollBy","getTotalSize","_ref6","map","_ref7","scrollToFn","measure","low","high","getCurrentValue","middle","currentValue","useIsomorphicLayoutEffect","React","useVirtualizerBase","rerender","resolvedOptions","instance2","flushSync","useVirtualizer"],"sourceRoot":""}