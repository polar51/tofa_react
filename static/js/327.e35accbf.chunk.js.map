{"version":3,"file":"static/js/327.e35accbf.chunk.js","mappings":"yMAUA,MAAMA,EAAuBC,IAC3B,MAAMC,EAAa,IAAKD,GAYxB,OAVkC,IAA9BC,EAAWC,QAAQC,SACrBF,EAAWC,QAAU,MAEW,IAA9BD,EAAWG,QAAQD,SACrBF,EAAWG,QAAU,MAES,IAA5BH,EAAWI,MAAMF,SACnBF,EAAWI,MAAQ,OAGdC,EAAAA,EAAAA,GAAS,CACdC,SAAUC,EAAAA,GAASC,KAAKR,GACxBS,QAASA,IACAC,EAAAA,EAAAA,kBAAmCV,IAE5C,EAGEW,EAAeZ,IACZa,EAAAA,EAAAA,GAAiB,CACtBN,SAAUO,EAAAA,GAAML,KAAKT,GACrBU,QAASA,IAAMC,EAAAA,EAAAA,UAA2BX,GAC1Ce,iBAAkBC,IAAQ,IAAAC,EAAA,OAAqB,QAArBA,EAAID,EAASE,gBAAQ,IAAAD,GAAAA,CAAS,IAItDE,EAAiBC,IACdd,EAAAA,EAAAA,GAAS,CACdC,SAAUc,EAAAA,GAASC,OAAOF,GAC1BV,QAASA,IAAMC,EAAAA,EAAAA,YAA6BS,KAI1CG,EAAkBH,IACfd,EAAAA,EAAAA,GAAS,CACdC,SAAUiB,EAAAA,GAAUF,OAAOF,GAC3BV,QAASA,IAAMC,EAAAA,EAAAA,aAA8BS,GAC7CK,QAASL,EAAGjB,OAAS,EACrBuB,SAAUN,EAAGjB,OAAS,IAIpBwB,EAA2BP,IACxBd,EAAAA,EAAAA,GAAS,CACdC,SAAUqB,EAAAA,GAAqBN,OAAOF,GACtCV,QAASA,IAAMC,EAAAA,EAAAA,sBAAuCS,GACtDK,QAASL,EAAGjB,OAAS,EACrBuB,SAAUN,EAAGjB,OAAS,G,0FCzD1B,MAqEA,EArEwB0B,IAAwB,IAAvB,KAAEC,KAASC,GAAMF,EACxC,MAAMG,GAASC,EAAAA,EAAAA,UAAQ,KACrB,MAAMC,EAAa,GACbC,EAAe,GACfC,EAAY,GACZC,EAAS,GAEfP,EAAKQ,SAAQC,IACXL,EAAWM,KAAKD,EAAKE,aACrBN,EAAaK,KAAKD,EAAKG,eACvBL,EAAOG,KAAKD,EAAKF,QACjBD,EAAUI,KAAKD,EAAKH,UAAU,IAwChC,MArCkB,CAChBO,QAAS,CACPC,QAAS,QAEXC,OAAQ,CACNf,KAAM,CAAC,yCAAY,qBAAO,2CAE5BgB,MAAO,CACL,CACEC,KAAM,WACNjB,KAAMI,IAGVc,MAAO,CACL,CACED,KAAM,UAGVE,OAAQ,CACN,CACEC,KAAM,yCACNH,KAAM,MACNjB,KAAMM,GAER,CACEc,KAAM,qBACNH,KAAM,MACNjB,KAAMO,GAER,CACEa,KAAM,yCACNH,KAAM,MACNjB,KAAMK,IAKI,GACf,CAACL,IAEJ,OACEqB,EAAAA,EAAAA,KAACC,EAAAA,EAAY,CACXpB,OAAQA,EACRqB,UAAQ,EACRC,YAAU,EACVC,MAAM,aACNC,MAAO,CACLC,OAAQ,WAEN1B,GAEJ,E,cC/DN,MAQA,EARkBF,IAAa,IAAZ,GAAET,GAAIS,EACvB,MAAM,KAAEC,EAAO,KAAOH,EAAAA,EAAAA,IAAyBP,GAE/C,OACE+B,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,CAAAC,SAAG7B,EAAK3B,OAAS,GAAIgD,EAAAA,EAAAA,KAACS,EAAe,CAAC9B,KAAMA,KAAWqB,EAAAA,EAAAA,KAACU,EAAAA,EAAW,KAAO,C,uDCP9E,MAYA,EAZoBA,KAEhBV,EAAAA,EAAAA,KAAAO,EAAAA,SAAA,CAAAC,UACER,EAAAA,EAAAA,KAAA,OAAK/B,GAAG,aAAa0C,UAAU,YAAWH,UACxCR,EAAAA,EAAAA,KAAA,QAAMW,UAAU,OAAMH,SAA+B,mCAA1B,8B","sources":["hooks/api/fault-modeling-hook.js","pages/fault-modeling/BreakdownCharts.js","pages/fault-modeling/Breakdown.js","pages/fault-modeling/EmptyCharts.js"],"sourcesContent":["import { useInfiniteQuery, useQuery } from '@tanstack/react-query';\nimport { faultModelingApi } from '@api/index';\nimport {\n  FAULT,\n  MODELING,\n  FLEET_ID,\n  FREQUENCY,\n  FAULT_MODELING_TREND,\n} from '@constants/query-key-factory';\n\nconst useFaultModelingList = filter => {\n  const copyFilter = { ...filter };\n\n  if (copyFilter.faultCd.length === 0) {\n    copyFilter.faultCd = null;\n  }\n  if (copyFilter.fleetId.length === 0) {\n    copyFilter.fleetId = null;\n  }\n  if (copyFilter.grade.length === 0) {\n    copyFilter.grade = null;\n  }\n\n  return useQuery({\n    queryKey: MODELING.list(copyFilter),\n    queryFn: () => {\n      return faultModelingApi.listFaultModeling(copyFilter);\n    },\n  });\n};\n\nconst useFaultList = filter => {\n  return useInfiniteQuery({\n    queryKey: FAULT.list(filter),\n    queryFn: () => faultModelingApi.listFault(filter),\n    getNextPageParam: lastPage => lastPage.nextPage ?? false,\n  });\n};\n\nconst useFleetIdList = id => {\n  return useQuery({\n    queryKey: FLEET_ID.detail(id),\n    queryFn: () => faultModelingApi.listFleetId(id),\n  });\n};\n\nconst useFrequencyGet = id => {\n  return useQuery({\n    queryKey: FREQUENCY.detail(id),\n    queryFn: () => faultModelingApi.getFrequency(id),\n    enabled: id.length > 0,\n    suspense: id.length > 0,\n  });\n};\n\nconst useFaultModelingTrendGet = id => {\n  return useQuery({\n    queryKey: FAULT_MODELING_TREND.detail(id),\n    queryFn: () => faultModelingApi.getFaultModelingTrend(id),\n    enabled: id.length > 0,\n    suspense: id.length > 0,\n  });\n};\n\nexport {\n  useFaultModelingList,\n  useFaultList,\n  useFleetIdList,\n  useFrequencyGet,\n  useFaultModelingTrendGet,\n};\n","import React, { useMemo } from 'react';\nimport ReactECharts from 'echarts-for-react';\n\nconst BreakdownCharts = ({ data, ...rest }) => {\n  const option = useMemo(() => {\n    const detectTime = [];\n    const anomalyScore = [];\n    const frequency = [];\n    const expect = [];\n\n    data.forEach(info => {\n      detectTime.push(info.detect_time);\n      anomalyScore.push(info.anomaly_score);\n      expect.push(info.expect);\n      frequency.push(info.frequency);\n    });\n\n    const newOption = {\n      tooltip: {\n        trigger: 'axis',\n      },\n      legend: {\n        data: ['고장 발생 건수', '기대값', '이상 빈도 점수'],\n      },\n      xAxis: [\n        {\n          type: 'category',\n          data: detectTime,\n        },\n      ],\n      yAxis: [\n        {\n          type: 'value',\n        },\n      ],\n      series: [\n        {\n          name: '고장 발생 건수',\n          type: 'bar',\n          data: frequency,\n        },\n        {\n          name: '기대값',\n          type: 'bar',\n          data: expect,\n        },\n        {\n          name: '이상 빈도 점수',\n          type: 'bar',\n          data: anomalyScore,\n        },\n      ],\n    };\n\n    return newOption;\n  }, [data]);\n\n  return (\n    <ReactECharts\n      option={option}\n      notMerge\n      lazyUpdate\n      theme=\"theme_name\"\n      style={{\n        height: '100%',\n      }}\n      {...rest}\n      // onChartReady={this.onChartReadyCallback}\n    />\n  );\n};\n\nexport default BreakdownCharts;\n","import React from 'react';\nimport { useFaultModelingTrendGet } from '@hooks/api/fault-modeling-hook';\nimport BreakdownCharts from './BreakdownCharts';\nimport EmptyCharts from './EmptyCharts';\n\nconst Breakdown = ({ id }) => {\n  const { data = [] } = useFaultModelingTrendGet(id);\n\n  return (\n    <>{data.length > 0 ? <BreakdownCharts data={data} /> : <EmptyCharts />}</>\n  );\n};\n\nexport default Breakdown;\n","import React from 'react';\n\nconst EmptyCharts = () => {\n  return (\n    <>\n      <div id=\"no_result2\" className=\"no_result\">\n        <span className=\"lang\" key=\"indivisualNoSearchValue\">\n          검색값 없음\n        </span>\n      </div>\n    </>\n  );\n};\n\nexport default EmptyCharts;\n"],"names":["useFaultModelingList","filter","copyFilter","faultCd","length","fleetId","grade","useQuery","queryKey","MODELING","list","queryFn","faultModelingApi","useFaultList","useInfiniteQuery","FAULT","getNextPageParam","lastPage","_lastPage$nextPage","nextPage","useFleetIdList","id","FLEET_ID","detail","useFrequencyGet","FREQUENCY","enabled","suspense","useFaultModelingTrendGet","FAULT_MODELING_TREND","_ref","data","rest","option","useMemo","detectTime","anomalyScore","frequency","expect","forEach","info","push","detect_time","anomaly_score","tooltip","trigger","legend","xAxis","type","yAxis","series","name","_jsx","ReactECharts","notMerge","lazyUpdate","theme","style","height","_Fragment","children","BreakdownCharts","EmptyCharts","className"],"sourceRoot":""}