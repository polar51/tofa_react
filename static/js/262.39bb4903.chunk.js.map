{"version":3,"file":"static/js/262.39bb4903.chunk.js","mappings":"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","sources":["../node_modules/@tanstack/virtual-core/src/utils.ts","../node_modules/@tanstack/virtual-core/src/index.ts","../node_modules/@tanstack/react-virtual/src/index.tsx"],"sourcesContent":["export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: false | string\n    debug?: () => any\n    onChange?: (result: TResult) => void\n    initialDeps?: TDeps\n  },\n) {\n  let deps = opts.initialDeps ?? []\n  let result: TResult | undefined\n\n  return (): TResult => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    opts?.onChange?.(result)\n\n    return result!\n  }\n}\n\nexport function notUndefined<T>(value: T | undefined, msg?: string): T {\n  if (value === undefined) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : ''}`)\n  } else {\n    return value\n  }\n}\n\nexport const approxEqual = (a: number, b: number) => Math.abs(a - b) < 1\n\nexport const debounce = (\n  targetWindow: Window & typeof globalThis,\n  fn: Function,\n  ms: number,\n) => {\n  let timeoutId: number\n  return function (this: any, ...args: any[]) {\n    targetWindow.clearTimeout(timeoutId)\n    timeoutId = targetWindow.setTimeout(() => fn.apply(this, args), ms)\n  }\n}\n","import { approxEqual, memo, notUndefined, debounce } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\nexport interface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  if (!targetWindow.ResizeObserver) {\n    return () => {}\n  }\n\n  const observer = new targetWindow.ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nconst addEventListenerOptions = {\n  passive: true,\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nconst supportsScrollend =\n  typeof window == 'undefined' ? true : 'onscrollend' in window\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number, isScrolling: boolean) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback = supportsScrollend\n    ? () => undefined\n    : debounce(\n        targetWindow,\n        () => {\n          cb(offset, false)\n        },\n        instance.options.isScrollingResetDelay,\n      )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number, isScrolling: boolean) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback = supportsScrollend\n    ? () => undefined\n    : debounce(\n        targetWindow,\n        () => {\n          cb(offset, false)\n        },\n        instance.options.isScrollingResetDelay,\n      )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollX' : 'scrollY']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number, isScrolling: boolean) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    sync: boolean,\n  ) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number | (() => number)\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  gap?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: VirtualItem[]\n  lanes?: number\n  isScrollingResetDelay?: number\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  targetWindow: (Window & typeof globalThis) | null = null\n  isScrolling: boolean = false\n  private scrollToIndexTimeoutId: number | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: number[] = []\n  scrollRect: Rect\n  scrollOffset: number\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments: number = 0\n  shouldAdjustScrollPositionOnItemSizeChange:\n    | undefined\n    | ((\n        item: VirtualItem,\n        delta: number,\n        instance: Virtualizer<TScrollElement, TItemElement>,\n      ) => boolean)\n  measureElementCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      }\n\n      if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n        return null\n      }\n\n      return (_ro = new this.targetWindow.ResizeObserver((entries) => {\n        entries.forEach((entry) => {\n          this._measureElement(entry.target as TItemElement, entry)\n        })\n      }))\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } | null = null\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset =\n      typeof this.options.initialOffset === 'function'\n        ? this.options.initialOffset()\n        : this.options.initialOffset\n    this.measurementsCache = this.options.initialMeasurementsCache\n    this.measurementsCache.forEach((item) => {\n      this.itemSizeCache.set(item.key, item.size)\n    })\n\n    this.notify(false, false)\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      gap: 0,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      isScrollingResetDelay: 150,\n      ...opts,\n    }\n  }\n\n  private notify = (force: boolean, sync: boolean) => {\n    const { startIndex, endIndex } = this.range ?? {\n      startIndex: undefined,\n      endIndex: undefined,\n    }\n    const range = this.calculateRange()\n\n    if (\n      force ||\n      startIndex !== range?.startIndex ||\n      endIndex !== range?.endIndex\n    ) {\n      this.options.onChange?.(this, sync)\n    }\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    this.measureElementCache.forEach(this.observer.observe)\n    return () => {\n      this.observer.disconnect()\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      if (this.scrollElement && 'ownerDocument' in this.scrollElement) {\n        this.targetWindow = this.scrollElement.ownerDocument.defaultView\n      } else {\n        this.targetWindow = this.scrollElement?.window ?? null\n      }\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.notify(false, false)\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0\n          this.scrollDirection = isScrolling\n            ? this.scrollOffset < offset\n              ? 'forward'\n              : 'backward'\n            : null\n          this.scrollOffset = offset\n\n          const prevIsScrolling = this.isScrolling\n          this.isScrolling = isScrolling\n\n          this.notify(prevIsScrolling !== isScrolling, isScrolling)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getMeasurementOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getFurthestMeasurement = (\n    measurements: VirtualItem[],\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n          if (a.end === b.end) {\n            return a.index - b.index\n          }\n\n          return a.end - b.end\n        })[0]\n      : undefined\n  }\n\n  private getMeasurements = memo(\n    () => [this.getMeasurementOptions(), this.itemSizeCache],\n    ({ count, paddingStart, scrollMargin, getItemKey }, itemSizeCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end + this.options.gap\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range =\n        measurements.length > 0 && outerSize > 0\n          ? calculateRange({\n              measurements,\n              outerSize,\n              scrollOffset,\n            })\n          : null)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return range === null\n        ? []\n        : rangeExtractor({\n            startIndex: range.startIndex,\n            endIndex: range.endIndex,\n            overscan,\n            count,\n          })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const item = this.measurementsCache[this.indexFromElement(node)]\n\n    if (!item || !node.isConnected) {\n      this.measureElementCache.forEach((cached, key) => {\n        if (cached === node) {\n          this.observer.unobserve(node)\n          this.measureElementCache.delete(key)\n        }\n      })\n      return\n    }\n\n    const prevNode = this.measureElementCache.get(item.key)\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.measureElementCache.set(item.key, node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, entry, this)\n\n    this.resizeItem(item, measuredItemSize)\n  }\n\n  resizeItem = (item: VirtualItem, size: number) => {\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n    const delta = size - itemSize\n\n    if (delta !== 0) {\n      if (\n        this.shouldAdjustScrollPositionOnItemSizeChange !== undefined\n          ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this)\n          : item.start < this.scrollOffset + this.scrollAdjustments\n      ) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(item.index)\n      this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size))\n\n      this.notify(true, false)\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= this.scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= this.scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - this.getSize()\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const measurement = notUndefined(this.getMeasurements()[index])\n\n    if (align === 'auto') {\n      if (\n        measurement.end >=\n        this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd\n      ) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        this.scrollOffset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return [this.scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.measureElementCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null && this.targetWindow) {\n      this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const [toOffset, align] = this.getOffsetForIndex(index, initialAlign)\n\n    this._scrollToOffset(toOffset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode() && this.targetWindow) {\n      this.scrollToIndexTimeoutId = this.targetWindow.setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.measureElementCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [toOffset] = this.getOffsetForIndex(index, align)\n\n          if (!approxEqual(toOffset, this.scrollOffset)) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.scrollOffset + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () => {\n    const measurements = this.getMeasurements()\n\n    let end: number\n    // If there are no measurements, set the end to paddingStart\n    if (measurements.length === 0) {\n      end = this.options.paddingStart\n    } else {\n      // If lanes is 1, use the last measurement's end, otherwise find the maximum end value among all measurements\n      end =\n        this.options.lanes === 1\n          ? measurements[measurements.length - 1]?.end ?? 0\n          : Math.max(\n              ...measurements.slice(-this.options.lanes).map((m) => m.end),\n            )\n    }\n\n    return end - this.options.scrollMargin + this.options.paddingEnd\n  }\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.options.onChange?.(this, false)\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n","import * as React from 'react'\nimport { flushSync } from 'react-dom'\nimport {\n  elementScroll,\n  observeElementOffset,\n  observeElementRect,\n  observeWindowOffset,\n  observeWindowRect,\n  PartialKeys,\n  Virtualizer,\n  VirtualizerOptions,\n  windowScroll,\n} from '@tanstack/virtual-core'\nexport * from '@tanstack/virtual-core'\n\n//\n\nconst useIsomorphicLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction useVirtualizerBase<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n>(\n  options: VirtualizerOptions<TScrollElement, TItemElement>,\n): Virtualizer<TScrollElement, TItemElement> {\n  const rerender = React.useReducer(() => ({}), {})[1]\n\n  const resolvedOptions: VirtualizerOptions<TScrollElement, TItemElement> = {\n    ...options,\n    onChange: (instance, sync) => {\n      if (sync) {\n        flushSync(rerender)\n      } else {\n        rerender()\n      }\n      options.onChange?.(instance, sync)\n    },\n  }\n\n  const [instance] = React.useState(\n    () => new Virtualizer<TScrollElement, TItemElement>(resolvedOptions),\n  )\n\n  instance.setOptions(resolvedOptions)\n\n  React.useEffect(() => {\n    return instance._didMount()\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate()\n  })\n\n  return instance\n}\n\nexport function useVirtualizer<\n  TScrollElement extends Element,\n  TItemElement extends Element,\n>(\n  options: PartialKeys<\n    VirtualizerOptions<TScrollElement, TItemElement>,\n    'observeElementRect' | 'observeElementOffset' | 'scrollToFn'\n  >,\n): Virtualizer<TScrollElement, TItemElement> {\n  return useVirtualizerBase<TScrollElement, TItemElement>({\n    observeElementRect: observeElementRect,\n    observeElementOffset: observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options,\n  })\n}\n\nexport function useWindowVirtualizer<TItemElement extends Element>(\n  options: PartialKeys<\n    VirtualizerOptions<Window, TItemElement>,\n    | 'getScrollElement'\n    | 'observeElementRect'\n    | 'observeElementOffset'\n    | 'scrollToFn'\n  >,\n): Virtualizer<Window, TItemElement> {\n  return useVirtualizerBase<Window, TItemElement>({\n    getScrollElement: () => (typeof document !== 'undefined' ? window : null),\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    initialOffset: () => (typeof document !== 'undefined' ? window.scrollY : 0),\n    ...options,\n  })\n}\n"],"names":["memo","getDeps","fn","opts","_opts$initialDeps","result","deps","initialDeps","_a","_b","_c","_d","depTime","key","debug","call","Date","now","newDeps","length","some","dep","index","resultTime","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","concat","max","min","onChange","notUndefined","value","msg","Error","debounce","targetWindow","ms","timeoutId","_len","arguments","args","Array","_key","clearTimeout","setTimeout","apply","this","defaultKeyExtractor","defaultRangeExtractor","range","start","startIndex","overscan","end","endIndex","count","arr","i","push","observeElementRect","instance","cb","element","scrollElement","handler","rect","width","height","getBoundingClientRect","ResizeObserver","observer","entries","entry","borderBoxSize","box","inlineSize","blockSize","observe","unobserve","addEventListenerOptions","passive","supportsScrollend","window","observeElementOffset","offset","fallback","options","isScrollingResetDelay","createHandler","isScrolling","horizontal","endHandler","addEventListener","removeEventListener","measureElement","elementScroll","_ref2","adjustments","behavior","toOffset","scrollTo","Virtualizer","constructor","_this","unsubs","scrollToIndexTimeoutId","measurementsCache","itemSizeCache","Map","pendingMeasuredCacheIndexes","scrollDirection","scrollAdjustments","measureElementCache","_ro","get","forEach","_measureElement","target","disconnect","setOptions","opts2","Object","_ref3","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","rangeExtractor","initialRect","scrollMargin","gap","indexAttribute","initialMeasurementsCache","lanes","notify","force","sync","_this$range","calculateRange","cleanup","filter","Boolean","d","_didMount","_willUpdate","getScrollElement","_ref4","ownerDocument","defaultView","_scrollToOffset","scrollOffset","scrollRect","prevIsScrolling","getSize","getMeasurementOptions","getFurthestMeasurement","measurements","furthestMeasurementsFound","furthestMeasurements","m","measurement","has","lane","previousFurthestMeasurement","set","size","from","values","sort","a","b","getMeasurements","_ref5","slice","furthestMeasurement","measuredSize","estimateSize","process","outerSize","_ref8","getOffset","findNearestBinarySearch","getIndexes","indexFromElement","node","attributeName","indexStr","getAttribute","parseInt","warn","item","isConnected","cached","delete","prevNode","measuredItemSize","resizeItem","_this$itemSizeCache$g","delta","shouldAdjustScrollPositionOnItemSizeChange","getVirtualItems","indexes","virtualItems","k","len","getVirtualItemForOffset","getOffsetForAlignment","align","scrollSizeProp","maxOffset","document","documentElement","getOffsetForIndex","undefined","isDynamicMode","cancelScrollToIndex","scrollToOffset","scrollToIndex","initialAlign","toOffset2","abs","approxEqual","scrollBy","getTotalSize","_ref6","map","_ref7","scrollToFn","measure","low","high","getCurrentValue","middle","currentValue","useIsomorphicLayoutEffect","React","useVirtualizerBase","rerender","resolvedOptions","instance2","flushSync","useVirtualizer"],"sourceRoot":""}