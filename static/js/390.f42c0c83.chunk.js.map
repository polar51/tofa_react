{"version":3,"file":"static/js/390.f42c0c83.chunk.js","mappings":"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","sources":["hooks/api/fault-modeling-hook.js","pages/fault-modeling/List.js"],"sourcesContent":["import { useInfiniteQuery, useQuery } from '@tanstack/react-query';\nimport { faultModelingApi } from '@api/index';\nimport {\n  FAULT,\n  MODELING,\n  FLEET_ID,\n  FREQUENCY,\n  FAULT_MODELING_TREND,\n} from '@constants/query-key-factory';\n\nconst useFaultModelingList = filter => {\n  const copyFilter = { ...filter };\n\n  if (copyFilter.faultCd.length === 0) {\n    copyFilter.faultCd = null;\n  }\n  if (copyFilter.fleetId.length === 0) {\n    copyFilter.fleetId = null;\n  }\n  if (copyFilter.grade.length === 0) {\n    copyFilter.grade = null;\n  }\n\n  return useQuery({\n    queryKey: MODELING.list(copyFilter),\n    queryFn: () => {\n      return faultModelingApi.listFaultModeling(copyFilter);\n    },\n  });\n};\n\nconst useFaultList = filter => {\n  return useInfiniteQuery({\n    queryKey: FAULT.list(filter),\n    queryFn: () => faultModelingApi.listFault(filter),\n    getNextPageParam: lastPage => lastPage.nextPage ?? false,\n  });\n};\n\nconst useFleetIdList = id => {\n  return useQuery({\n    queryKey: FLEET_ID.detail(id),\n    queryFn: () => faultModelingApi.listFleetId(id),\n  });\n};\n\nconst useFrequencyGet = id => {\n  return useQuery({\n    queryKey: FREQUENCY.detail(id),\n    queryFn: () => faultModelingApi.getFrequency(id),\n    enabled: id.length > 0,\n    suspense: id.length > 0,\n  });\n};\n\nconst useFaultModelingTrendGet = id => {\n  return useQuery({\n    queryKey: FAULT_MODELING_TREND.detail(id),\n    queryFn: () => faultModelingApi.getFaultModelingTrend(id),\n    enabled: id.length > 0,\n    suspense: id.length > 0,\n  });\n};\n\nexport {\n  useFaultModelingList,\n  useFaultList,\n  useFleetIdList,\n  useFrequencyGet,\n  useFaultModelingTrendGet,\n};\n","import React, { useRef } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport { useFaultModelingList } from '@hooks/api';\n\nconst EmptyRowCreator = () => {\n  return (\n    <>\n      <tr>\n        <td colSpan=\"9\">\n          <span>고장코드를 선택해 주세요. </span>\n        </td>\n      </tr>\n    </>\n  );\n};\n\nconst RowCreator = ({ faultInfo, ...rest }) => {\n  const {\n    detect_time: detectTime,\n    fleet_id: fleetId,\n    mfds,\n    fault_name: faultName,\n    cnt,\n    expect,\n    anomaly_score: anomalyScore,\n    level,\n  } = faultInfo;\n  return (\n    <>\n      <tr className=\"listSelect\" style={{ cursor: 'pointer' }} {...rest}>\n        <td style={{ flex: 0.8 }}>{detectTime}</td>\n        <td style={{ flex: 1 }} key={fleetId}>\n          {fleetId}\n        </td>\n        <td style={{ flex: 1 }}>{mfds}</td>\n        <td style={{ flex: 3.3 }}>{faultName}</td>\n        <td style={{ flex: 1 }}>{cnt}</td>\n        <td style={{ flex: 1 }}>{expect}</td>\n        <td style={{ flex: 1 }}>{anomalyScore}</td>\n        <td style={{ flex: 1 }}>{level}</td>\n      </tr>\n    </>\n  );\n};\n\nconst List = ({ onRowClick }) => {\n  const { control } = useFormContext();\n  const filterOptions = useWatch({\n    control,\n  });\n\n  const { data } = useFaultModelingList({\n    startDate: filterOptions.startDate,\n    endDate: filterOptions.endDate,\n    fleetId: filterOptions.fleet_id,\n    grade: filterOptions.grade,\n    faultCd: filterOptions.faultCd,\n  });\n\n  const parentRef = useRef();\n\n  const rowVirtualizer = useVirtualizer({\n    count: data.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 50,\n    overscan: 30,\n  });\n\n  return (\n    <>\n      <div className=\"t_area\">\n        <table className=\"tb_data\">\n          <caption>상세정보</caption>\n          <colgroup>\n            <col width=\"8%\" />\n            <col width=\"10%\" />\n            <col width=\"10%\" />\n            <col width=\"%\" />\n            <col width=\"10%\" />\n            <col width=\"10%\" />\n            <col width=\"10%\" />\n            <col width=\"10%\" />\n          </colgroup>\n          <thead>\n            <tr>\n              <th scope=\"col\">고장 검지 일자</th>\n              <th scope=\"col\">차량번호</th>\n              <th scope=\"col\">고장번호</th>\n              <th scope=\"col\">고장명</th>\n              <th scope=\"col\">발생 건수</th>\n              <th scope=\"col\">기대값</th>\n              <th scope=\"col\">이상빈도 점수</th>\n              <th scope=\"col\">고장등급</th>\n            </tr>\n          </thead>\n        </table>\n      </div>\n      <div className=\"c_area\" ref={parentRef} style={{ overflow: 'auto' }}>\n        <table className=\"tb_data\">\n          <caption>상세정보</caption>\n          <colgroup>\n            <col width=\"8%\" />\n            <col width=\"10%\" />\n            <col width=\"10%\" />\n            <col width=\"%\" />\n            <col width=\"10%\" />\n            <col width=\"10%\" />\n            <col width=\"10%\" />\n            <col width=\"10%\" />\n          </colgroup>\n          <tbody\n            id=\"test_modeling\"\n            style={{\n              position: 'relative',\n              height: `${rowVirtualizer.getTotalSize()}px`,\n            }}\n          >\n            {rowVirtualizer.getVirtualItems().map(row => {\n              const info = data[row.index];\n              return info ? (\n                <RowCreator\n                  faultInfo={info}\n                  key={row.key}\n                  ref={row.measureRef}\n                  style={{\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '38px',\n                    transform: `translateY(${row.start}px)`,\n                    display: 'flex',\n                    cursor: 'pointer',\n                  }}\n                  onClick={() => onRowClick(row.key)}\n                />\n              ) : (\n                <EmptyRowCreator />\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\n\nexport default List;\n"],"names":["useFaultModelingList","filter","copyFilter","faultCd","length","fleetId","grade","useQuery","queryKey","MODELING","list","queryFn","faultModelingApi","useFaultList","useInfiniteQuery","FAULT","getNextPageParam","lastPage","_lastPage$nextPage","nextPage","useFleetIdList","id","FLEET_ID","detail","useFrequencyGet","FREQUENCY","enabled","suspense","useFaultModelingTrendGet","FAULT_MODELING_TREND","EmptyRowCreator","_jsx","_Fragment","children","colSpan","RowCreator","_ref","faultInfo","rest","detect_time","detectTime","fleet_id","mfds","fault_name","faultName","cnt","expect","anomaly_score","anomalyScore","level","_jsxs","className","style","cursor","flex","_ref2","onRowClick","control","useFormContext","filterOptions","useWatch","data","startDate","endDate","parentRef","useRef","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","overscan","width","scope","ref","overflow","position","height","concat","getTotalSize","getVirtualItems","map","row","info","index","measureRef","top","left","transform","start","display","onClick","key"],"sourceRoot":""}